from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression 
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.svm import SVR
x = data_new.drop(columns = ['Year','Total_metering', 'Date', 'Time','Sub_metering_2','Sub_metering_1','Sub_metering_3'])
y = data_new['Total_metering']
x_train, x_test, y_train, y_test = train_test_split(x, y , test_size = .33, random_state = 42)
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

model_lr = LinearRegression()
model_lr.fit(x_train, y_train)
print(f'coeficients are: {model_lr.coef_}')
print(f'intercept is: {model_lr.intercept_}')
y_pred_lr = model_lr.predict(x_test)
model_lr = LinearRegression()
model_lr.fit(x_train, y_train)
print(f'coeficients are: {model_lr.coef_}')
print(f'intercept is: {model_lr.intercept_}')
y_pred_lr = model_lr.predict(x_test)
â€‹
coeficients are: [ 22.44960707  -0.09999766  -0.30481032 -11.41522832  -0.13018903
  -1.04159557]
intercept is: 8.857850276725898

model_lasso = Lasso()
model_lasso.fit(x_train, y_train)
y_pred_lasso = model_lasso.predict(x_test)
print(f'coeficients are: {model_lasso.coef_}')
print(f'intercept is: {model_lasso.intercept_}')
coeficients are: [ 9.86459826 -0.         -0.          0.         -0.         -0.        ]
intercept is: 8.857850276725896
model_elastic = ElasticNet()
model_elastic.fit(x_train, y_train)
y_pred_elastic = model_elastic.predict(x_test)  
print(f'coeficients are: {model_elastic.coef_}')
print(f'intercept is: {model_elastic.intercept_}')
coeficients are: [ 4.11758248  0.         -0.39956716  4.03445501 -0.         -0.        ]
intercept is: 8.8578502767259
model_SVR = SVR()
model_SVR.fit(x_train, y_train)
y_pred_SVR = model_SVR.predict(x_test)
